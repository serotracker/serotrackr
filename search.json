[{"path":"https://serotracker.github.io/serotrackr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 serotrackr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://serotracker.github.io/serotrackr/articles/serotrackr.html","id":"validate-your-data","dir":"Articles","previous_headings":"","what":"1) Validate your data","title":"serotrackr","text":"first step use st_validate(). , need specify columns data contains data required submission. Instead unquoted column names, can also provide vector length one arguments, applied records data validation.  st_validate() produced detailed report errors need addressed proceeding. keep things concise, replace age_group, age, sex correct values also correct result_cat. Now, let’s rerun st_validate():  Hooray! glimps validated data:","code":"validated_df <- st_validate(   sample_raw_data,   dataset_id = dataset_id,   id = id,   age_group = age_group,   age = age,   sex = sex,   adm0 = regions$adm0$Canada,   adm1 = regions$adm1$Canada$Alberta,   adm2 = regions$adm2$Canada$Alberta$Calgary,   collection_start_date = \"2023-01-01\",   collection_end_date = \"2023-02-01\",   test_id = assays$`SARS-CoV-2`$`AAZ LMB - IgG, IgM - COVID-PRESTO®`,   result = result,   result_cat = result_cat,   include_others = TRUE ) set.seed(4567) new_raw_data <- sample_raw_data %>%   dplyr::mutate(     age_group = rep(c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40+\"), each=20),     age = c(sample(0:9, 20, replace=TRUE), sample(10:19, 20, replace=TRUE),             sample(20:29, 20, replace=TRUE), sample(30:39, 20, replace=TRUE),             sample(40:120, 20, replace=TRUE)),     sex = sample(c(rep(\"f\", 40), rep(\"m\", 40), rep(\"o\", 20))),     result_cat = dplyr::case_when(result_cat == \"neg\" ~ \"negative\",                                   result_cat == \"pos\" ~ \"positive\",                                   TRUE ~ result_cat)   ) validated_df <- st_validate(   new_raw_data,   dataset_id = dataset_id,   id = id,   age_group = age_group,   age = age,   sex = sex,   adm0 = regions$adm0$Canada,   adm1 = regions$adm1$Canada$Alberta,   adm2 = regions$adm2$Canada$Alberta$Calgary,   collection_start_date = \"2023-01-01\",   collection_end_date = \"2023-02-01\",   test_id = assays$`SARS-CoV-2`$`AAZ LMB - IgG, IgM - COVID-PRESTO®`,   result = result,   result_cat = result_cat,   include_others = TRUE ) head(validated_df) #> # A tibble: 6 × 13 #>   dataset_id    id age_group   age sex    adm1       adm2  collection_start_date #>        <dbl> <dbl> <chr>     <int> <chr>  <chr>      <chr> <date>                #> 1          1     1 0-9           2 Male   4576071B9… 7649… 2023-01-01            #> 2          1     2 0-9           2 Female 4576071B9… 7649… 2023-01-01            #> 3          1     3 0-9           3 Female 4576071B9… 7649… 2023-01-01            #> 4          1    28 0-9           2 Male   4576071B9… 7649… 2023-01-01            #> 5          2    33 0-9           1 Female 4576071B9… 7649… 2023-01-01            #> 6          2    65 0-9           7 Female 4576071B9… 7649… 2023-01-01            #> # ℹ 5 more variables: collection_end_date <date>, test_id <chr>, result <dbl>, #> #   result_cat <chr>, another_col <chr>"},{"path":"https://serotracker.github.io/serotrackr/articles/serotrackr.html","id":"generate-aggregate-estimates","dir":"Articles","previous_headings":"","what":"2) Generate aggregate estimates","title":"serotrackr","text":"Use st_aggregate() generate aggregated estimates:","code":"estimates <- st_aggregate(validated_df) head(estimates) #> # A tibble: 6 × 27 #>   dataset_id subgroup  strata age_group age_min age_max sex   pop_adj test_adj #>        <dbl> <chr>     <chr>  <chr>       <int>   <int> <chr> <lgl>   <lgl>    #> 1          1 overall   NA     All             1     118 All   FALSE   FALSE    #> 2          2 overall   NA     All             0     116 All   FALSE   FALSE    #> 3          1 age_group 0-9    0-9             1       6 All   FALSE   FALSE    #> 4          1 age_group 10-19  10-19          10      18 All   FALSE   FALSE    #> 5          1 age_group 20-29  20-29          20      29 All   FALSE   FALSE    #> 6          1 age_group 30-39  30-39          31      37 All   FALSE   FALSE    #> # ℹ 18 more variables: adm1 <chr>, adm2 <chr>, start_date <date>, #> #   end_date <date>, test_id_1 <chr>, test_id_2 <chr>, test_id_3 <chr>, #> #   test_combination <lgl>, numerator <dbl>, denominator <int>, seroprev <dbl>, #> #   seroprev_95_ci_lower <dbl>, seroprev_95_ci_upper <dbl>, #> #   ab_denominator <int>, ab_titer_min <dbl>, ab_titer_max <dbl>, #> #   ab_titer_mean <dbl>, ab_titer_sd <dbl>"},{"path":"https://serotracker.github.io/serotrackr/articles/serotrackr.html","id":"export-to-excel-for-submission","dir":"Articles","previous_headings":"","what":"3) Export to Excel for submission","title":"serotrackr","text":"st_save() function exports validated data generated estimates Excel document. fields, mostly metadata, exported document still need filled . first sheet document necessary instructions. done, document ready submitted SeroTracker.com.","code":"st_save(validated_df, estimates, path = \"submission.xlsx\")"},{"path":"https://serotracker.github.io/serotrackr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Reza Hosseini. Author, maintainer. SeroTracker. Copyright holder, funder.","code":""},{"path":"https://serotracker.github.io/serotrackr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hosseini R (2023). serotrackr: Help SeroTracker Submissions. https://serotracker.github.io/serotrackr, https://github.com/serotracker/serotrackr.","code":"@Manual{,   title = {serotrackr: Help with SeroTracker Submissions},   author = {Reza Hosseini},   year = {2023},   note = {https://serotracker.github.io/serotrackr, https://github.com/serotracker/serotrackr}, }"},{"path":[]},{"path":"https://serotracker.github.io/serotrackr/index.html","id":"goal","dir":"","previous_headings":"","what":"Goal","title":"Help with SeroTracker Submissions","text":"serotrackr facilitates submissions SeroTracker 2.0 website.","code":""},{"path":"https://serotracker.github.io/serotrackr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Help with SeroTracker Submissions","text":"can install development version serotrackr like :","code":"devtools::install_github(\"serotracker/serotrackr\")"},{"path":"https://serotracker.github.io/serotrackr/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Help with SeroTracker Submissions","text":"vignette guides best practices using serotrackr.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays.html","id":null,"dir":"Reference","previous_headings":"","what":"Assays list — assays","title":"Assays list — assays","text":"list assays different pathogens. list can used st_validate() function select assays.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assays list — assays","text":"","code":"assays"},{"path":"https://serotracker.github.io/serotrackr/reference/assays.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Assays list — assays","text":"assays nested named list","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Assays list — assays","text":"Based list assays gathered SeroTracker SARS-CoV-2.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assays list — assays","text":"","code":"assays$`SARS-CoV-2`$`EUROIMMUN - IgG - Anti-SARS-CoV-2 ELISA IgG` #> [1] \"EUROIMMUN - IgG - Anti-SARS-CoV-2 ELISA IgG\""},{"path":"https://serotracker.github.io/serotrackr/reference/assays_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Assays dataframe — assays_df","title":"Assays dataframe — assays_df","text":"Assay data different pathogens.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assays dataframe — assays_df","text":"","code":"assays_df"},{"path":"https://serotracker.github.io/serotrackr/reference/assays_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Assays dataframe — assays_df","text":"assays_df data frame 309 rows 16 columns: pathogen Pathogen; currently SARS-CoV-2 available test_id Unique descriptive ID test test_name Test name isotype Isotype test_type Test type antibody_target Antibody target rdt_test RDT test: boolean variable manufacturer Manufacturer multiplex_detection Multiplex detection: boolean variable spike_antibody_target Spike antibody target manufacturer_sensitivity Manufacturer sensitivity manufacturer_specificity Manufacturer specificity unique_identifier Unique identifier info_page_url Info page URL quantitative_qualitative Quantitative /qualitative who_doherty_find_verified Doherty find verified","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/assays_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Assays dataframe — assays_df","text":"Based list assays gathered SeroTracker SARS-CoV-2.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions list — regions","title":"Regions list — regions","text":"nested named list regions three administrative (ADM) levels. list can used st_validate() st_locate() functions rename geographic areas based SeroTracker's predefined list region names. help automate generation visualizations analyses.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions list — regions","text":"","code":"regions"},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regions list — regions","text":"regions list. element list returns unique ID.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regions list — regions","text":"Based CGAZ dataset geoBoundaries.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regions list — regions","text":"adm0: Use level select study's country. adm1: Use level select study's state/province. adm2: Use level select study's district/municipality equivalent division.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regions list — regions","text":"","code":"regions$adm2$Canada$Alberta$Calgary #> [1] \"76498100B36899265297983\""},{"path":"https://serotracker.github.io/serotrackr/reference/regions_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions dataframe — regions_df","title":"Regions dataframe — regions_df","text":"Regions data three administrative levels","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions dataframe — regions_df","text":"","code":"regions_df"},{"path":"https://serotracker.github.io/serotrackr/reference/regions_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regions dataframe — regions_df","text":"regions_df data frame 53087 rows 6 columns: shapeGroup ISO 3166 code country shapeType Aministrative (ADM) level region. ADM0: country; ADM1: state/province; ADM2: district/municipality/equivalent NAME_0 Country name region NAME_1 State/province name region NAME_2 District/municipality/ equivalent name region shapeID_v5 Unique ID region administartive level","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/regions_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regions dataframe — regions_df","text":"Based CGAZ dataset geoBoundaries.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/sample_raw_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example fictitious data — sample_raw_data","title":"Example fictitious data — sample_raw_data","text":"Example dataset showcase package's expectations raw dataset package's workflow make raw data ready submission SeroTracker 2.0.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/sample_raw_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example fictitious data — sample_raw_data","text":"","code":"sample_raw_data"},{"path":"https://serotracker.github.io/serotrackr/reference/sample_raw_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example fictitious data — sample_raw_data","text":"sample_raw_data data frame 100 rows 14 columns: dataset_id ID collection period id Anonimized ID participant sample age_group Age group age Age sex Sex adm0 Administative level 0 (country) region names adm1 Administative level 1 (state/province) region names adm2 Administative level 2 (district/municipalities) region names collection_start_date Collection start date collection_end_date Collection end date test_id Test ID result Test results result_cat Interpretation test results; e.g. positive, negative, borderline another_col Representing columns raw data might contain","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/sample_raw_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example fictitious data — sample_raw_data","text":"Fictitious data","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/serotrackr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"serotrackr: Help with SeroTracker Submissions — serotrackr-package","title":"serotrackr: Help with SeroTracker Submissions — serotrackr-package","text":"serotrackr package specifically developed help users prepare raw data submission SeroTracker platform. happens several steps represented one function ; 1) mapping columns raw data required submission, 2) cleaning raw data, 3) generating aggregate estimayes, 4) adjusting estimates, 5) exporting final data xlsx file remaining fields can filled user submission SeroTracker.com.","code":""},{"path":[]},{"path":"https://serotracker.github.io/serotrackr/reference/serotrackr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"serotrackr: Help with SeroTracker Submissions — serotrackr-package","text":"Maintainer: Reza Hosseini rezahs@alum.ubc.ca (ORCID) contributors: SeroTracker [copyright holder, funder]","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate validated data — st_aggregate","title":"Aggregate validated data — st_aggregate","text":"Generate aggregate estimates based validated individual level data.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate validated data — st_aggregate","text":"","code":"st_aggregate(   data,   subgroup = c(\"age_group\", \"sex\", \"age_group + sex\"),   borderline = c(\"negative\", \"positive\", NA),   add_ci = TRUE,   round_digits = 4,   test_combination = NULL )"},{"path":"https://serotracker.github.io/serotrackr/reference/st_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate validated data — st_aggregate","text":"data validated data.frame output st_validate() subgroup character vector subgrouping variables. default, aggregate estimates generated overall data, well age group, sex, age group + sex subgroups. borderline borderline results treated? Default negative. add_ci Boolean. Whether add binomial proportion confidence interval. calculated using Wilson score interval method binom::binom.confint() function. round_digits Integer indicating number decimal places estimate. passed digits argument base::round(). test_combination functional yet. data based one assay, relationship assays?","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate validated data — st_aggregate","text":"summarized data.frame","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate validated data — st_aggregate","text":"","code":"new_raw_data <- dplyr::mutate(   sample_raw_data,   age_group = rep(c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40+\"), each=20),   age = c(sample(0:9, 20, replace=TRUE), sample(10:19, 20, replace=TRUE),           sample(20:29, 20, replace=TRUE), sample(30:39, 20, replace=TRUE),           sample(40:120, 20, replace=TRUE)),   sex = c(rep(\"f\", 40), rep(\"m\", 40), rep(\"o\", 20)),   result_cat = dplyr::case_when(result_cat == \"neg\" ~ \"negative\",                                 result_cat == \"pos\" ~ \"positive\",                                 TRUE ~ result_cat) )  validated_df <- st_validate(   new_raw_data,   dataset_id = dataset_id,   id = id,   age_group = age_group,   age = age,   sex = sex,   adm0 = regions$adm0$Canada,   adm1 = regions$adm1$Canada$Alberta,   adm2 = regions$adm2$Canada$Alberta$Calgary,   collection_start_date = \"2023-01-01\",   collection_end_date = \"2023-02-01\",   test_id = assays$`SARS-CoV-2`$`AAZ LMB - IgG, IgM - COVID-PRESTO®`,   result = result,   result_cat = result_cat,   include_others = TRUE,   rmd_safe = TRUE ) #> ── Mapping columns and validating data ───────────────────────────────────────── #> ✔ age_group is a valid column. [579ms] #> ✔ age is a valid column. [27ms] #> ✔ sex is a valid column. [13ms] #> ✔ adm0 is a valid string. [93ms] #> ✔ adm1 is a valid string. [10ms] #> ✔ adm2 is a valid string. [14ms] #> ✔ collection_start_date is a valid scalar. [205ms] #> ✔ collection_end_date is a valid scalar. [21ms] #> ✔ test_id is a valid string. [7ms] #> ✔ result is a valid column. [10ms] #> ✔ result_cat is a valid column. [10ms] #> ✔ dataset_id is a valid column. [3ms] #> ✔ id is a valid column. [23ms] #> ── Validation finished ───────────────────────────────────────────────────────── #> Success! Validated data created.  st_aggregate(validated_df) #> # A tibble: 28 × 27 #>    dataset_id subgroup  strata age_group age_min age_max sex   pop_adj test_adj #>         <dbl> <chr>     <chr>  <chr>       <int>   <int> <chr> <lgl>   <lgl>    #>  1          1 overall   NA     All             0     113 All   FALSE   FALSE    #>  2          2 overall   NA     All             0     113 All   FALSE   FALSE    #>  3          1 age_group 0-9    0-9             0       8 All   FALSE   FALSE    #>  4          1 age_group 10-19  10-19          10      19 All   FALSE   FALSE    #>  5          1 age_group 20-29  20-29          20      29 All   FALSE   FALSE    #>  6          1 age_group 30-39  30-39          30      38 All   FALSE   FALSE    #>  7          1 age_group 40+    40+            43     113 All   FALSE   FALSE    #>  8          2 age_group 0-9    0-9             0       8 All   FALSE   FALSE    #>  9          2 age_group 10-19  10-19          10      18 All   FALSE   FALSE    #> 10          2 age_group 20-29  20-29          20      29 All   FALSE   FALSE    #> # ℹ 18 more rows #> # ℹ 18 more variables: adm1 <chr>, adm2 <chr>, start_date <date>, #> #   end_date <date>, test_id_1 <chr>, test_id_2 <chr>, test_id_3 <chr>, #> #   test_combination <lgl>, numerator <dbl>, denominator <int>, seroprev <dbl>, #> #   seroprev_95_ci_lower <dbl>, seroprev_95_ci_upper <dbl>, #> #   ab_denominator <int>, ab_titer_min <dbl>, ab_titer_max <dbl>, #> #   ab_titer_mean <dbl>, ab_titer_sd <dbl>"},{"path":"https://serotracker.github.io/serotrackr/reference/st_locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert region names to codes — st_locate","title":"Convert region names to codes — st_locate","text":"function helps convert region names region codes acceptable serotrackr. usually used get error either adm1 adm2 arguments st_validate(). case, can use function convert region names codes make sure pass validation st_validate(). st_locate() uses first three (four) arguments automatically match region names serotrackr's predefined region codes, stored serotrackr::regions_df. performs exact case insensitive matching also ignores accented letters. produces report region names matched. can use st_locate()'s ... (ellipsis) argument define unmatched region names.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert region names to codes — st_locate","text":"","code":"st_locate(   data,   adm0,   adm1,   adm2 = NULL,   ...,   into = c(\"adm1\", \"adm2\"),   n_unmatched_printed = 20 )"},{"path":"https://serotracker.github.io/serotrackr/reference/st_locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert region names to codes — st_locate","text":"data dataframe. adm0 string representing one country (adm0) code. Use serotrackr::regions$adm0$YourCountry select . adm1, adm2 string unquoted name character column contains state/province (adm1), district/municipality (adm2) names codes. study conducted one adm1 adm2 region, use serotrackr::regions select . ... sequence two-sided assignments \"region_name\" = region_code. region_name unmatched region name. region_code must form regions$adm1$YourCountry$YourState unmatched adm1 regions regions$adm2$YourCountry$YourState$YourDistrict unmatched adm2 regions. st_locate() uses dplyr::case_when() internally part. character vector length 1 2, specifying name(s) new columns added data adm1 (adm2) region codes. length one, name adm1 column assigned. length two, names adm1 adm2 columns assigned, respectively. n_unmatched_printed single number, indicating quantity unmatched unique region names printed console. argument implemented prevent potentially flooding console unmatched region names. default value 20. 20 unmatched region names data, increase number see rest.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert region names to codes — st_locate","text":"data.frame consists input data.frame plus one (two) new columns containing adm1 (adm2) region codes. can use two new columns adm1 /adm2 arguments st_validate().","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_locate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert region names to codes — st_locate","text":"","code":"st_locate(sample_raw_data,           adm0 = regions$adm0$Canada,           adm1 = regions$adm1$Canada$Alberta,           adm2 = regions$adm2$Canada$Alberta$Calgary) #> ✔ adm1 region names/codes were successfully matched. `adm1` column was added. #> ✔ adm2 region names/codes were successfully matched. `adm2` column was added. #> # A tibble: 100 × 14 #>    dataset_id    id age_group   age sex   adm0   adm1                   adm2     #>         <dbl> <dbl> <chr>     <dbl> <chr> <chr>  <chr>                  <chr>    #>  1          1     1 12-120        6 m     Canada 4576071B96817999749607 7649810… #>  2          1     2 12-8.5       NA m     Canada 4576071B96817999749607 7649810… #>  3          1     3 NA           23 o     Canada 4576071B96817999749607 7649810… #>  4          1    28 0-10          4 other Canada 4576071B96817999749607 7649810… #>  5          2    33 20-30        22 f     Canada 4576071B96817999749607 7649810… #>  6          2    65 110+        119 male  Canada 4576071B96817999749607 7649810… #>  7          2    47 70-60        78 queer Canada 4576071B96817999749607 7649810… #>  8          2    44 30-20        37 queer Canada 4576071B96817999749607 7649810… #>  9          1    58 110-120     119 queer Canada 4576071B96817999749607 7649810… #> 10          1    24 80-90        85 other Canada 4576071B96817999749607 7649810… #> # ℹ 90 more rows #> # ℹ 6 more variables: collection_start_date <chr>, collection_end_date <chr>, #> #   test_id <chr>, result <dbl>, result_cat <chr>, another_col <chr>"},{"path":"https://serotracker.github.io/serotrackr/reference/st_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to Excel — st_save","title":"Export data to Excel — st_save","text":"Organizes individual level data aggregate estimates single xlsx file uploaded SeroTracker website.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to Excel — st_save","text":"","code":"st_save(data, estimates, path)"},{"path":"https://serotracker.github.io/serotrackr/reference/st_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to Excel — st_save","text":"data validated data.frame, output st_validate() estimates data.frame, output st_aggregate() path save xlsx file","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to Excel — st_save","text":"xlsx file saved disc","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to Excel — st_save","text":"","code":"new_raw_data <- dplyr::mutate(   sample_raw_data,   age_group = rep(c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40+\"), each=20),   age = c(sample(0:9, 20, replace=TRUE), sample(10:19, 20, replace=TRUE),           sample(20:29, 20, replace=TRUE), sample(30:39, 20, replace=TRUE),           sample(40:120, 20, replace=TRUE)),   sex = sample(c(rep(\"f\", 40), rep(\"m\", 40), rep(\"o\", 20))),   result_cat = dplyr::case_when(result_cat == \"neg\" ~ \"negative\",                                 result_cat == \"pos\" ~ \"positive\",                                 TRUE ~ result_cat) )   validated_df <- st_validate(   new_raw_data,   dataset_id = dataset_id,   id = id,   age_group = age_group,   age = age,   sex = sex,   adm0 = regions$adm0$Canada,   adm1 = regions$adm1$Canada$Alberta,   adm2 = regions$adm2$Canada$Alberta$Calgary,   collection_start_date = \"2023-01-01\",   collection_end_date = \"2023-02-01\",   test_id = assays$`SARS-CoV-2`$`AAZ LMB - IgG, IgM - COVID-PRESTO®`,   result = result,   result_cat = result_cat,   include_others = TRUE,   rmd_safe = TRUE ) #> ── Mapping columns and validating data ───────────────────────────────────────── #> ✔ age_group is a valid column. [25ms] #> ✔ age is a valid column. [36ms] #> ✔ sex is a valid column. [13ms] #> ✔ adm0 is a valid string. [9ms] #> ✔ adm1 is a valid string. [9ms] #> ✔ adm2 is a valid string. [14ms] #> ✔ collection_start_date is a valid scalar. [12ms] #> ✔ collection_end_date is a valid scalar. [20ms] #> ✔ test_id is a valid string. [9ms] #> ✔ result is a valid column. [11ms] #> ✔ result_cat is a valid column. [21ms] #> ✔ dataset_id is a valid column. [3ms] #> ✔ id is a valid column. [12ms] #> ── Validation finished ───────────────────────────────────────────────────────── #> Success! Validated data created.  estimates <- st_aggregate(validated_df)  st_save(validated_df, estimates, path = tempdir())"},{"path":"https://serotracker.github.io/serotrackr/reference/st_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate individual level data — st_validate","title":"Validate individual level data — st_validate","text":"Locates required optional columns data validates .","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate individual level data — st_validate","text":"","code":"st_validate(   data,   dataset_id,   id,   adm0,   adm1 = NULL,   adm2 = NULL,   collection_start_date,   collection_end_date,   test_id,   result,   result_cat = NULL,   age_group = NULL,   age = NULL,   sex = NULL,   include_others = TRUE,   rmd_safe = FALSE )"},{"path":"https://serotracker.github.io/serotrackr/reference/st_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate individual level data — st_validate","text":"data data.frame. dataset_id unquoted column name length-one vector differentiates data collection event(s). id column anonymized individual level IDs. column used generate aggregate estimates. adm0, adm1, adm2 string unquoted name character column contains country (adm0), state/province (adm1), district/municipality (adm2) codes. Use serotrackr::regions select . one adm0 acceptable. adm1 adm2 can . collection_start_date, collection_end_date Unquoted name date character column date string scalar (vector length one) sampling start end dates. lubridate::parse_date_time2() used parse dates. yyyy-mm-dd dd-mm-yyyy structures acceptable. recognize arbitrary non-digit separators well separator. Month Can entered digit full abbreviated name. test_id string unquoted name character column contains test IDs. Use serotrackr::assays select . result Unquoted name numeric column containing test results. result_cat Unquoted name character column values positive, borderline, negative, ignoring case. single string also acceptable. age_group Unquoted name character column string containing age group(s). structures acceptable number-number number+. E.g. 18-64, 65+. age Unquoted name numeric column single number. Acceptable values 0 120 inclusive. sex Unquoted name character column string. Acceptable values : f, m, o, female, male, ignoring case. include_others include additional columns rmd_safe Logical. TRUE, output message appropriate R markdown, .e. progress indicators removed messages printed time, making one chunk R markdown's knitted output. FALSE (default), progress indicators messages printed argument one one, making appropriate interactive use.","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate individual level data — st_validate","text":"validated data.frame","code":""},{"path":"https://serotracker.github.io/serotrackr/reference/st_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate individual level data — st_validate","text":"","code":"st_validate(   sample_raw_data,   dataset_id = dataset_id,   id = id,   age_group = \"12-17\",   sex = \"m\",   adm0 = regions$adm0$Canada,   adm1 = regions$adm1$Canada$Alberta,   adm2 = regions$adm2$Canada$Alberta$Calgary,   collection_start_date = \"2023-01-01\",   collection_end_date = \"2023-02-01\",   test_id = assays$`SARS-CoV-2`$`AAZ LMB - IgG, IgM - COVID-PRESTO®`,   result = result,   result_cat = \"negative\",   include_others = TRUE,   rmd_safe = TRUE ) #> ── Mapping columns and validating data ───────────────────────────────────────── #> ✔ age_group is a valid string. [45ms] #> ✔ sex is a valid string. [11ms] #> ✔ adm0 is a valid string. [9ms] #> ✔ adm1 is a valid string. [9ms] #> ✔ adm2 is a valid string. [12ms] #> ✔ collection_start_date is a valid scalar. [11ms] #> ✔ collection_end_date is a valid scalar. [38ms] #> ✔ test_id is a valid string. [7ms] #> ✔ result is a valid column. [11ms] #> ✔ result_cat is a valid string. [8ms] #> ✔ dataset_id is a valid column. [3ms] #> ✔ id is a valid column. [11ms] #> ── Validation finished ───────────────────────────────────────────────────────── #> Success! Validated data created. #> # A tibble: 100 × 12 #>    dataset_id    id age_group sex   adm1             adm2  collection_start_date #>         <dbl> <dbl> <chr>     <chr> <chr>            <chr> <date>                #>  1          1     1 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  2          1     2 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  3          1     3 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  4          1    28 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  5          2    33 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  6          2    65 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  7          2    47 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  8          2    44 12-17     Male  4576071B9681799… 7649… 2023-01-01            #>  9          1    58 12-17     Male  4576071B9681799… 7649… 2023-01-01            #> 10          1    24 12-17     Male  4576071B9681799… 7649… 2023-01-01            #> # ℹ 90 more rows #> # ℹ 5 more variables: collection_end_date <date>, test_id <chr>, result <dbl>, #> #   result_cat <chr>, another_col <chr>"},{"path":"https://serotracker.github.io/serotrackr/news/index.html","id":"serotrackr-development-version","dir":"Changelog","previous_headings":"","what":"serotrackr (development version)","title":"serotrackr (development version)","text":"Updated theme pkgdown website. Organized Reference page pkgdown website.","code":""},{"path":"https://serotracker.github.io/serotrackr/news/index.html","id":"serotrackr-020","dir":"Changelog","previous_headings":"","what":"serotrackr 0.2.0","title":"serotrackr 0.2.0","text":"Added st_locate() help converting region names serotrackr’s acceptable region codes. First, function automatic component tries match user’s region names predefined serotrackr::regions_df. exact case insensitive match treats accented unaccented letters . function produces report user’s unmatched unique region names. second component, function dot-dot-dot (ellipsis) argument region codes can defined unmatched unique region name one one. Added argument st_aggregate() generate 95% binomial proportion confidence interval seroprevalence estimate. st_save() replaced save_xlsx(). Apart consistent naming scheme, new function uses output st_validate() st_aggregate() functions fill much cells possible Excel template. Added initial version st_aggregate() generate aggregate estimates validated individual level data. st_validate() replaced map_cols(). Naming functions consistent, trying avoid namespace conflicts. new function accepts columns single values, checks required input types (character, numeric, date), applies several validation rules argument, generates descriptive messages console parts data okay parts issues. Added validation rules internal object. rules used several stages check data. Added website using pkgdown. Added logo README.md file. used pkgdown website .","code":""},{"path":"https://serotracker.github.io/serotrackr/news/index.html","id":"serotrackr-010","dir":"Changelog","previous_headings":"","what":"serotrackr 0.1.0","title":"serotrackr 0.1.0","text":"Initial release Added map_cols() function mapping columns Added clean() function cleaning validating data Added save_xlsx() function exporting data standard Excel template Assays regions organized two nested named lists, users can take advantage RStudio search assays regions dropdown-like behaviour Added documention current functions data objects Added sample data showcase raw data expected package handles Added package lifecycle information","code":""}]
