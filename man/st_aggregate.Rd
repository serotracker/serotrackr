% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_aggregate.R
\name{st_aggregate}
\alias{st_aggregate}
\title{Aggregate validated data}
\usage{
st_aggregate(
  data,
  subgroup = c("age_group", "sex", "age_group + sex"),
  borderline = c("negative", "positive", NA),
  add_ci = TRUE,
  round_digits = 4,
  test_combination = NULL
)
}
\arguments{
\item{data}{A validated data.frame that is the output of \code{st_validate()}}

\item{subgroup}{A character vector of subgrouping variables. By default,
aggregate estimates are generated for the overall data, as well as
age group, sex, and age group + sex subgroups.}

\item{borderline}{How should borderline results be treated? Default is as
negative.}

\item{add_ci}{Boolean. Whether to add binomial proportion confidence interval.
It is calculated using the Wilson score interval method through the
\code{binom::binom.confint()} function.}

\item{round_digits}{Integer indicating the number of decimal places of the
estimate. It is passed to the digits argument of \code{base::round()}.}

\item{test_combination}{Not functional yet. When data is based on more than
one assay, what is the relationship between those assays?}
}
\value{
A summarized data.frame
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Generate aggregate estimates based on validated individual level data.
}
\examples{
mydata <- dplyr::mutate(
  sample_raw_data,
  age = ifelse(age \%in\% c(-999, 999), NA, age)
)

validated_df <- st_validate(
  mydata,
  dataset_id = dataset_id,
  id = id,
  age_group = age_group,
  age = age,
  sex = sex,
  adm0 = regions$adm0$Canada,
  adm1 = regions$adm1$Canada$Alberta,
  adm2 = regions$adm2$Canada$Alberta$Calgary,
  collection_start_date = "2020-Mar-01",
  collection_end_date = "15/8/2023",
  test_id = assays$`SARS-CoV-2`$`ID.Vet - IgG - ID Screen`,
  result = result,
  result_cat = result_cat,
  include_others = TRUE,
  rmd_safe = TRUE
)

st_aggregate(validated_df)

}
